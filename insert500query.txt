13
7
6
3
1



13
7
3
1




12
9
6
2




10
5
5
5

String insertQuery = "INSERT INTO data_table (column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14, column15, column16, column17, column18, column19, column20) VALUES ('value1', 'value2', 'value3', 'value4', 'value5','value6', 'value7', 'value8', 'value9', 'value10', 'value11', 'value12', 'value13', 'value14', 'value15', 'value16', 'value17', 'value18', 'value19', 'value20')";


import org.quartz.*;
import java.sql.*;

public class InsertJob implements Job {

    public void execute(JobExecutionContext context) throws JobExecutionException {

        try {
            // Veritabanı bağlantısı oluşturma
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/mydatabase", "root", "password");

            // Insert sorgusu hazırlama
            String insertQuery = "INSERT INTO mytable (column1, column2, column3) VALUES (?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(insertQuery);

            // Sorgu parametrelerini belirleme
            pstmt.setString(1, "değer1");
            pstmt.setInt(2, 123);
            pstmt.setDouble(3, 4.56);

            // Sorguyu çalıştırma
            pstmt.executeUpdate();

            // Kaynakları serbest bırakma
            pstmt.close();
            conn.close();

        } catch (SQLException ex) {
            System.out.println("Veritabanı hatası: " + ex.getMessage());
        }
    }
}


import org.quartz.*;
import static org.quartz.JobBuilder.*;
import static org.quartz.TriggerBuilder.*;
import static org.quartz.CronScheduleBuilder.*;

public class MainClass {

    public static void main(String[] args) {

        try {
            // SchedulerFactory oluşturma
            SchedulerFactory sf = new StdSchedulerFactory();

            // Scheduler oluşturma
            Scheduler sched = sf.getScheduler();

            // JobDetail oluşturma
            JobDetail job = newJob(InsertJob.class)
                .withIdentity("insertJob", "insertGroup")
                .build();

            // Trigger oluşturma
            Trigger trigger = newTrigger()
                .withIdentity("insertTrigger", "insertGroup")
                .withSchedule(cronSchedule("0/10 * * * * ?"))
                .build();

            // JobDetail ve Trigger'ı Scheduler'a eklenmesi
            sched.scheduleJob(job, trigger);

            // Scheduler başlatma
            sched.start();

        } catch (SchedulerException ex) {
            System.out.println("Scheduler hatası: " + ex.getMessage());
        }
    }
}


